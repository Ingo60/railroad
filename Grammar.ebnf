module ::= moduleclause (';' definitions|'where' '{' definitions '}')|'{' definitions '}'
definitions ::= definition (semicoli definitions?)?
definition ::= DOCUMENTATION definition?|visibledefinition|topdefinition
topdefinition ::= import|fixity operators|NATIVE PACKAGE typeclause interfaces wheretokens|publicdefinition
visibledefinition ::= PRIVATE publicdefinition|PROTECTED publicdefinition|PUBLIC publicdefinition|ABSTRACT datainit wheredef
publicdefinition ::= typedef|datainit wheredef|classdef|INSTANCE insthead wheredef|DERIVE insthead|annotation|nativedef|fundef
classdef ::= CLASS ccontext (EARROW CONID tyvar wheredef|wheredef)
datadef ::= datainit wheredef
instdef ::= INSTANCE insthead wheredef
wheredef ::= ('where' '{' ('}'|localdefs '}'))?
localdefs ::= dplocaldef (semicoli localdefs?)?
dplocaldef ::= DOCUMENTATION dplocaldef?|plocaldef
plocaldef ::= annotation|nativedef|fundef|PRIVATE (annotation|nativedef|fundef)|PROTECTED (annotation|nativedef|fundef)|PUBLIC (annotation|nativedef|fundef)
localdef ::= annotation|nativedef|fundef
appex ::= unex|appex unex
lambdabody ::= '\' apats lambdabody|('->'|'→') expr
getfield ::= VARID (('<-'|'←') expr|'=' expr)?
getfields ::= getfield (',' getfields?)?
dodefs ::= lcqual (semicoli dodefs?)?
lcqual ::= gqual|expr '=' expr|LET '{' letdefs '}'
lcquals ::= lcqual (',' lcquals?)?
exprSS ::= expr (';' exprSS?)?
exprSC ::= expr (',' exprSC?)?
field ::= VARID ('=' expr)?
fields ::= field (',' fields?)?
term ::= qvarid|literal|'_'|qconid ('{' (fields '}'|'}'))?|'[' (expr '|' lcquals ']'|']'|exprSC (']'|DOTDOT (expr ']'|']')))|'(' (')'|expr (')'|',' exprSC ')'|';' exprSS ')')|commata ')'|('!'|'?') ')'|SOMEOP (')'|expr ')')|binex ('-' ')'|SOMEOP ')')|'-' ')')
primary ::= term|DO '{' dodefs '}'|primary '.' (VARID|SOMEOP|'!'|'?'|'{' (VARID ('?' '}'|'=' '}'|('<-'|'←') '}')|getfields '}')|'[' expr ']')|qualifiers '{' (getfields '}'|VARID (('<-'|'←') '}'|'?' '}'|'=' '}'))
unex ::= primary|('!'|'?') unex
apats ::= unex apats?
lambda ::= '\' apats lambdabody
wherelet ::= 'where' '{' ('}'|letdefs '}')
gqual ::= expr (('<-'|'←') expr)?
gquals ::= gqual (',' gquals?)?
guard ::= '|' gquals ('->'|'→'|'=') expr
guards ::= '|' gquals aeq expr guards?
funhead ::= binex
fundef ::= binex ('=' expr|guards)|fundef wherelet
letdef ::= annotation|fundef
letdefs ::= annotation|fundef|(annotation|fundef) semicoli letdefs?
calts ::= calt (';' calts?)?
topex ::= IF expr thenx expr elsex expr|CASE expr OF '{' calts '}'|LET '{' letdefs '}' IN expr|'\' apats lambdabody|appex
binex ::= binex (SOMEOP binex|'-' binex)|topex|'-' topex
expr ::= binex (('::'|'∷') (forall|rho))?
pattern ::= expr
calt ::= expr (('->'|'→'|'=') expr|guards)|calt wherelet
aeq ::= '->'|'→'|'='
import ::= IMPORT modulename1 (importliste|VARID CONID importliste|CONID importliste)
importliste ::= (VARID '(' importspecs ')'|'(' (')'|importspecs ')')|PUBLIC importliste)?
importspecs ::= importspec (',' importspecs?)?
importspec ::= importitem (VARID|CONID|SOMEOP)?|PUBLIC importspec
importitem ::= qvarid|CONID '(' (memspecs ')'|')')|'?'|'!'|SOMEOP|qconid
memspecs ::= memspec (',' memspecs?)?
memspec ::= VARID|CONID|SOMEOP|(VARID|CONID|SOMEOP) (VARID|CONID|SOMEOP)|PUBLIC memspec
alias ::= VARID|CONID|SOMEOP
annotation ::= annoitems ('::'|'∷') (forall|rho)
annoitems ::= annoitem (',' annoitems)?
nativedef ::= PURE impurenativedef|impurenativedef
impurenativedef ::= NATIVE methodspec ('::'|'∷') sigexs
methodspec ::= fitem ((rawnativename|SOMEOP|'!'|'?') gargs|gargs|rawnativename|SOMEOP|'!'|'?')?
fitem ::= annoitem|'!'|'?'|'-'|SOMEOP
annoitem ::= VARID|'(' (SOMEOP ')'|'-' ')'|('!'|'?') ')')
datainit ::= DATA CONID ('=' (nativepur rawnativename gargs?|dalts)|dvars '=' (dalts|nativepur rawnativename gargs?))|NEWTYPE CONID ('=' dalt|dvars '=' dalt)
dalts ::= dalt ('|' dalts)?
dalt ::= visdalt DOCUMENTATION?|DOCUMENTATION visdalt
visdalt ::= strictdalt|PUBLIC strictdalt|PRIVATE strictdalt|PROTECTED strictdalt
strictdalt ::= '!' simpledalt|'?' simpledalt|simpledalt
simpledalt ::= CONID (simpletypes|'{' conflds '}')?
conflds ::= confld (DOCUMENTATION conflds?|',' conflds?)?
confld ::= fldids ('::'|'∷') (forall|rho)|docs fldids ('::'|'∷') (forall|rho)
sigexs ::= sigex ('|' sigexs)?
sigex ::= (forall|rho) THROWS tauSC|forall|rho
typedef ::= TYPE CONID ('=' (forall|rho)|dvars '=' (forall|rho))
sigma ::= forall|rho
derivedef ::= DERIVE insthead
insthead ::= icontext (EARROW tyname simpletype)?
icontext ::= qconid simpletype|'(' sicontexts ')'
sicontexts ::= qconid simpletype (',' sicontexts?)?
sicontext ::= qconid simpletype
contypes ::= simpletypes
nativespec ::= rawnativename gargs?
gargs ::= '{' (tauSC '}'|'}')
moduledefinition ::= NATIVE PACKAGE typeclause interfaces wheretokens
interfaces ::= (CLASS tauSC)?
typeclause ::= (TYPE tau)?
rhofun ::= simpletypes (('->'|'→') rhofun)?
tauSB ::= tau ('|' tauSB)?
tauSC ::= tau (',' tauSC)?
tau ::= simpletypes (('->'|'→') tau)?|FORALL boundvars mbdot rho
simpletype ::= tyvar|tyname|'(' tau (')'|',' tauSC ')'|'|' tauSB ')')|'[' tau ']'
simpletypes ::= simpletype simpletypes?
tapp ::= simpletypes
rho ::= simpletypes EARROW rhofun|rhofun
forall ::= FORALL boundvars ('.'|SOMEOP) rho
boundvars ::= VARID boundvars?
boundvar ::= VARID
ccontext ::= qconid tyvar|'(' scontexts ')'
tyname ::= qconid|'[' ']'|'(' (')'|('->'|'→') ')'|commata ')')
commata ::= ',' commata?
moduleclause ::= docs (PACKAGE modulename1|PROTECTED PACKAGE modulename1)|moduleclause words '(' qvarids ')'|PROTECTED PACKAGE modulename1|PACKAGE modulename1
docs ::= DOCUMENTATION (semicoli docs|docs)?
documentation ::= DOCUMENTATION
dvars ::= tyvar dvars?
elsex ::= ';' ELSE|ELSE
infix ::= fixity operators
fixity ::= INFIX INTCONST|INFIXL INTCONST|INFIXR INTCONST
fldids ::= fldid (',' fldids)?
fldid ::= strictfldid|PUBLIC strictfldid|PRIVATE strictfldid
jitem ::= rawnativename|SOMEOP|'!'|'?'
wheretokens ::= 'where' '{' (jtokens '}'|'}')
jtokens ::= jtoken jtokens?|'{' ('}' jtokens?|jtokens '}' jtokens?)
jtoken ::= VARID|CONID|QVARID|QCONID|CONID '.'|DOCUMENTATION|PACKAGE|IMPORT|INFIX|INFIXR|INFIXL|NATIVE|DATA|'where'|CLASS|INSTANCE|ABSTRACT|TYPE|TRUE|FALSE|IF|THEN|ELSE|CASE|OF|DERIVE|LET|IN|DO|FORALL|PRIVATE|PROTECTED|PUBLIC|PURE|THROWS|MUTABLE|INTCONST|STRCONST|LONGCONST|FLTCONST|DBLCONST|CHRCONST|'->'|'→'|'::'|'∷'|'<-'|'←'|EARROW|DOTDOT|SOMEOP|INTERPRET|','|'|'|'['|']'|'('|')'|'.'|'?'|'-'|';'|'!'|'='|'\'
scontexts ::= qconid tyvar (',' scontexts?)?
scontext ::= qconid tyvar
tyvar ::= VARID|'(' VARID ('::'|'∷') kind ')'
simplekind ::= SOMEOP|VARID|'(' kind ')'
kind ::= simplekind (('->'|'→') kind)?
literal ::= TRUE|FALSE|CHRCONST|STRCONST|INTCONST|BIGCONST|LONGCONST|FLTCONST|DBLCONST|REGEXP
mbdot ::= '.'|SOMEOP
modulename ::= modulename1
modulename1 ::= CONID|varidkw '.' modulename1|CONID '.' modulename1
nativename ::= rawnativename
nativepur ::= PURE NATIVE|MUTABLE NATIVE|NATIVE
operators ::= SOMEOP|VARID|'-'|(SOMEOP|VARID|'-') operators
opstring ::= SOMEOP|VARID|'-'
qvarids ::= qvarop (',' qvarids)?
qvarop ::= CONID '.' (CONID '.' (VARID|'!'|'?')|VARID|'!'|'?')|SOMEOP|'?'|'!'|VARID
operator ::= SOMEOP
strictfldid ::= VARID|'!' VARID|'?' VARID
plainfldid ::= VARID
qconid ::= CONID '.' (CONID '.' CONID|CONID)|CONID
qualifiers ::= CONID '.' (CONID '.')?
qvarid ::= CONID '.' (CONID '.' (VARID|'!'|'?')|VARID|'!'|'?')|VARID
rawnativename ::= VARID ('.' rawnativename)?|STRCONST|CONID '.' rawnativename|PACKAGE ('.' rawnativename)?|CONID
semicoli ::= ';' semicoli?
thenx ::= ';' THEN|THEN
varop ::= VARID|'!'|'?'
unop ::= '!'|'?'
varid ::= VARID
varidkw ::= VARID|DATA|TYPE|NATIVE|PURE|PACKAGE|IMPORT
words ::= VARID words?
word ::= VARID
GETS ::= '<-'|'←'
DCOLON ::= '::'|'∷'
LowercaseLetter ::= '«any character in Unicode category: Letter, Lowercase»'
QUALIFIER ::= CONID '.'
ARROW ::= '->'|'→'
WHERE ::= 'where'
Letter ::= '«any character in Unicode category: Letter»'
VARID ::= (LowercaseLetter|'_') (Letter|'_'|"'")*

