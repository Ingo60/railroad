{--
    Reads a YACC grammar and outputs it in a subset of
    'https://www.w3.org/TR/REC-xml/#sec-notation the EBNF variant used by W3C'.
    The resulting file can be processed by the 
    'http://www.bottlecaps.de/rr/ui Railroad Diagram Generator'
    to produce nice syntax diagrams.

    > Grammar ::= Production* 
    > Production  ::= NCName '::=' ( Choice | Link )  
    > Name  ::= [\w+] 
    > Choice  ::= SequenceOrDifference ( '|' SequenceOrDifference )*  
    > SequenceOrDifference    ::= Item*    
    > Item    ::= Primary ( '?' | '*' | '+' )?    
    > Primary ::= Name | StringLiteral | CharClass | '(' Choice ')'  
    > StringLiteral   ::= '"' [^"]* '"' | "'" [^']* "'"   /* ws: explicit */
    > CharClass   ::= '[' '^'? ( Char | CharRange)+ ']'   /* ws: explicit */
    > Char    ::= [http://www.w3.org/TR/xml#NT-Char]  
    > CharRange   ::= Char '-' [^]] /* ws: explicit */
    > Whitespace  ::= S | Comment 
    > S   ::= '\t' | '\n' | '\r' | ' '  
    > Comment ::= '/*' ( [^*] | '*'+ [^*/] )* '*'* '*/'   /* ws: explicit */
-}
module de.contexo.railroad.Main where

import Data.MicroParsec as P()
import Data.HashMap as Map()
import Data.Iterators(StringIterator SI)
import Data.List
import Data.Graph


-- ---------------------------------------------------------------------------
--      EBNF data types
-- ---------------------------------------------------------------------------

--- Data type for extended Backus-Naur Form (EBNF) rules.
--- The problem with EBNF is that nonsensical expressions can be built, like
---     > (foo? | bar?)+
--- In the same way, illegal (or, at least, undesirable) EBNF expressions can be build.
--- The function 'normalize' can be used to flat-out unnesseray nested expressions like:
--- > (a | (b|c) | d)   ==> (a|b|c|d)
--- > (a (b c) d)       ==> (a b c d)
--- > (a||b)            ==> (a | b)?
  
data EBNF = Alt {elems :: [EBNF] }      --- alternatives, normally not empty
          | Seq {elems :: [EBNF] }      --- sequence, may be empty
          | Qnt { quantor :: Quantor, elem :: EBNF }   --- ebnf quantified with "?", "+" or "*"
          | NonT {name :: String }      --- non terminal
          | Term {name :: String }      --- non terminal
          where
    --- precedence of the construct
    prec Alt{} = 0
    prec Seq{} = 1
    prec Qnt{} = 2
    prec _     = 3
    --- the empty EBNF
    isEmpty (Seq []) = true
    isEmpty _        = false
    --- sepearator between elements for show and pretty printing
    sep Alt{} = "|"
    sep _     = " " 
    showp p e 
        | e.{elems?}  → inparens (joined e.sep (map (showp e.prec) e.elems))
        | e.{elem?}   → inparens (showp e.prec e.elem ++ mark e.quantor)
        | otherwise   → e.name         
        where 
            mark Many = "*"
            mark Some = "+"
            mark _    = "?"
            parens = prec e < p
            inparens s = if parens then "(" ++ s ++ ")" else s
          
example = Alt [Seq [NonT "definition", 
                    Qnt Optional (
                        Alt [Term "'default'", 
                            Qnt Many (NonT "definition")])], 
                    Term "';'" ] 

instance Show EBNF where show = EBNF.showp 0
derive Eq EBNF

--- An EBNF definition
data EDef = Def { !name :: String, !ebnf :: EBNF }
derive Eq EDef
instance Show EDef where
    show def = def.name ++ " ::= " ++ show def.ebnf

--- remove unnessecary complexity from EBNF, and give errors for multiple quantifications
--- Invariants guaranteed after completion:
--- 1. An 'Alt' contains no empty 'Seq'
--- 2. Elements of 'Alt' are not 'Alt' themselves.
--- 3. An empty 'Seq' is not quantified.
--- 4. Elements of 'Seq' are not 'Seq's themselves.
normalize Alt{elems} = case flatAlt elems of
        es' | any (_.isEmpty) es' = Qnt Optional . normalize . Alt . filter (not . _.isEmpty) $ es'
        [] = Seq [] -- canonical empty
        [x] = x
        xs = Alt xs
    where
        flatAlt [] = []
        flatAlt (x:xs) = case normalize x of
            Alt{elems} → flatAlt (elems ++ xs)
            y          → y : flatAlt xs
normalize Seq{elems} = case flatSeq elems of
        [x] → x
        xs  → Seq xs
    where
        flatSeq [] = []
        flatSeq (x:xs) = case normalize x of
            Seq{elems}  → flatSeq (elems ++ xs)
            y           → y : flatSeq xs

normalize Qnt{quantor, elem} = case normalize elem of
        e@Qnt{} → error ("Illegal EBNF: "  ++ show Qnt{quantor, elem}
                    ++ "\nnormalizes to: " ++ show Qnt{quantor, elem=e})
        e@Seq [] → error ("Illegal EBNF: " ++ show Qnt{quantor, elem}
                    ++ "\nnormalizes to: " ++ show Qnt{quantor, elem=e})
        e   → Qnt{quantor, elem=e}

normalize e = e

--- compute a list of items that are referenced by an EBNF expression
--- (duplicates are not removed)
references :: EBNF -> [String]
references = go [] 
    where
        go acc  Alt{elems}  = fold go acc elems
        go acc  Seq{elems}  = fold go acc elems
        go acc  Qnt{elem}   = go acc elem
        go acc  NonT{name}  = name : acc
        go acc  Term{name}  = acc

--- Tell if a production is recursive
isRecursive ∷ EDef → Bool
isRecursive Def{name, ebnf} = name `elem` references ebnf

--- Tell the prefix and the remaining part
--- Apply only to normalized expressions that are not @Seq []@
prefix a = case a of
    Seq xs = (head xs, tail xs)
    e      = (e, [])
    

--- An EBNF Item can be quantified with ?, * or +
data Quantor = Many | Some | Optional
deriving Eq     Quantor
deriving Show   Quantor
          

--- a map of EBNF productions
type EMap = Map.HashMap String EDef


-- ---------------------------------------------------------------------------
--      YACC data types
-- ---------------------------------------------------------------------------

--- terminals and non-terminals are the foundations of YACC grammars
data Element = Terminal String | NonTerminal String

-- deriving Eq Element

--- a YACC rule is simply a possibly empty sequence of terminals and non-terminals 
newtype YRule = YRule [Element]

--- A YACC production is a list of alternative rules that defines a non-terminal.
--- Invariant: at most one rule is empty
data YProd = YProd String [YRule]

--- A YACC grammar is a sequence of productions
--- Each production defines a unique non terminal.
type YGram = Map.HashMap String [YRule]

-- ---------------------------------------------------------------------------
--      Parsers
-- ---------------------------------------------------------------------------

--- Parse 'Alt'
pAlt ∷ P.Parser Iterators.StringIterator Char EBNF
pAlt = do
    P.skip (P.space <|> pComment)
    normalize . Alt <$> P.sepBy1 pSeq pBar

--- Parse 'Seq'
pSeq ∷ P.Parser Iterators.StringIterator Char EBNF
pSeq = do
    P.skip (P.space <|> pComment)
    Seq <$> P.many pQnt

--- Parse 'Qnt'
pQnt ∷ P.Parser Iterators.StringIterator Char EBNF
pQnt = do
    P.spaces
    e ← pTerm
    q ← P.optional pQuantor
    pure (maybe id Qnt q e)

--- Parse a 'Term', 'NonT' or 'Alt' in parentheses    
pTerm ∷ P.Parser Iterators.StringIterator Char EBNF
pTerm = Term <$> pName
    <|> NonT <$> (pChar <|> pStr <|> pClass)
    <|> P.symbol (P.between pLeft pRight pAlt)

--- Parse "::=", ":" or "="
pEquals = P.symbol $ 
    (P.expect ':' >> P.expect ':' >> P.expect '=')
    <|> P.expect ':'
    <|> P.expect '='

--- Parse 'Edef'  
pDef ∷ P.Parser Iterators.StringIterator Char EDef
pDef = do
    P.skip (P.space <|> pComment)
    p ← pName
    pEquals
    alt ← pAlt
    P.symbol (P.expect ';')
    pure (Def p alt)
              

pQuantor ∷ P.Parser SI Char Quantor
pQuantor = P.symbol (
            const Optional <$> P.expect '?' 
        <|> const Many     <$> P.expect '*' 
        <|> const Some     <$> P.expect '+')
            
--- parse (
pLeft ∷ P.Parser SI Char Char
pLeft = P.symbol (P.expect '(')

--- parse )
pRight ∷ P.Parser SI Char Char
pRight = P.symbol (P.expect ')')

--- An identifier
pName ∷ P.Parser SI Char String
pName = P.symbol $ _.match <$> P.match '^\w+'

--- A sequence of characters enclosed in apostrophes (doesn't handle escape sequences)
--- Also, assumes there is at least one character between the apostrophes
pChar ∷ P.Parser SI Char String
pChar = P.symbol $ do
    P.expect '\''
    inner ← packed <$> P.manyWhile (!= '\'')
    P.expect '\''
    pure ("'" ++ inner ++ "'") 

--- A sequence of characters enclosed in quotes (doesn't handle escape sequences)
pStr ∷ P.Parser SI Char String
pStr = P.symbol do
    P.expect '"'
    inner ← packed <$> P.manyWhile (!= '"')
    P.expect '"'
    pure ("\"" ++ inner ++ "\"") 

--- Parses an EBNF character class
pClass ∷ P.Parser SI Char String
pClass = P.symbol $ do
            P.expect '['
            inner ← packed <$> P.manyWhile (!=']')
            P.expect ']'
            pure ("[" ++ inner ++ "]")

--- Parse a block enclosed in braces
pBlock = do 
            P.between (P.symbol (P.expect '{')) 
                      (P.symbol (P.expect '}'))
                      (P.skip (pBlock <|> const () <$> P.satisfy (\c → c != '{' && c != '}')))
            P.spaces

--- Parse an element
pElement = NonTerminal <$> pName <|> Terminal <$> pChar

--- Parse a rule
pRule = YRule <$> P.many pElement <* P.optional pBlock 

--- Parse a vertical bar
pBar = P.symbol (P.expect '|')

--- Parse a C-comment
pComment = do
        P.expect '/'
        P.expect '*'
        P.match  '^(?s).*?\*/'
        P.spaces
        pure ' '

--- Parse a production
pProd = do
    P.skip (P.space <|> pComment)
    p ← pName
    P.symbol (P.expect ':')
    alts ← P.sepBy1 pRule pBar
    P.symbol (P.expect ';')
    pure (YProd p alts)

--- Parse a YACC grammar and enforce invariants
grammar = do
        prods ← P.some pProd
        P.eos
        collect empty prods
    where
        collect map [] = pure map
        collect map (YProd p alts:ps) = do
                let emptys = length [ () | YRule [] <- alts ]
                case Map.lookup p map of
                    Just _  → P.failure ("found multiple rules for non-terminal `" ++ p ++ "´")
                    Nothing → if emptys > 1 
                        then P.failure ("production `" ++ p ++ "´ has " ++ show emptys ++ " empty rules.")
                        else collect (Map.insert p alts map) ps 

--- Parse a list of EBNF prods
ebnf = do
    prods ← P.some pDef
    P.eos
    pure prods 


parseYacc :: String -> IO (Either String YGram)
parseYacc src = do
        content ← readFile src 
        let lines = '\r?\n'.splitted content
            yaccsep = '^%%\s*$'
            ylines = takeWhile (!~ yaccsep) . drop 1 . dropWhile (!~ yaccsep) $ lines
            yytext = SI.from (joined "\n" ylines)
        stderr.printf "We have %d lines, %d of which are interesting.\n" (length lines) (length ylines)
        -- mapM_ stderr.println (take 5 ylines)
        case P.Parser.run grammar yytext of
            (result, rest) -> do
                when (length rest > 0) do stderr.println (SI.to (take 64 rest))
                pure result
    `catch` \(e::IOException) -> pure . Left $ e.show 

parseEBNF :: String -> IO (Either String [EDef])
parseEBNF src = do
        content ← readFile src 
        let yytext = SI.from content
        case P.Parser.run ebnf yytext of
            (result, rest) -> do
                when (length rest > 0) do stderr.println (SI.to (take 64 rest))
                pure result
    `catch` \(e::IOException) -> pure . Left $ e.show


-- ---------------------------------------------------------------------------
--      Functions to convert and manipulate grammars
-- ---------------------------------------------------------------------------


--- Make a dependency list for the yacc grammar
deps :: YGram -> [(String, [String])]
deps = fold (\ds\(name, rules) → (name, depsOf rules):ds) [] . Map.each
    where
        depsOf  = fold (++) [] . map ruleDep
        ruleDep (YRule es) = [ s | NonTerminal s ← es ]

--- Sort the dependencies topologically
topo = Graph.stronglyConnectedComponents . deps

--- Convert a YYProd to EBNF
convProd ∷ YProd → EDef
convProd (YProd name rules) = Def name (normalize choice)
    where
        choice = Alt (map convRule rules)

convRule ∷ YRule → EBNF
convRule (YRule elems) = Seq (map convItem elems)

convItem ∷ Element → EBNF
convItem (Terminal "'\\\\'") = Term "'\\'"
convItem (Terminal s)        = Term s
convItem (NonTerminal s)     = NonT s

--- Perform all optimizations on a production
optimize ∷ EMap → EDef → EDef
optimize emap eprod = eprod.{ebnf ← factorLeft . inline emap}

--- Inline 'trivial' EBNFs
inline ∷ EMap → EBNF → EBNF
inline emap x = inl x
    where
        inl Alt{elems}  = (normalize . Alt) (map inl elems)
        inl Seq{elems}  = Seq (map inl elems)
        inl Qnt{quantor, elem}   = Qnt quantor (inl elem)
        inl NonT{name}  = case Map.lookup name emap of
                            Just prod | trivial prod = prod.ebnf
                            other = NonT name
        inl term        = term   

--- Factor left
--- > (a b | a c | d) ==> (a (b | c) | d)
factorLeft Alt{elems=seqs} = case go . map prefix $ seqs of
        elems | elems == seqs = normalize . Alt . map factorLeft $ elems
              | otherwise     = factorLeft . Alt $ elems
    where
        go [] = []
        go ((xp,xt):ys) 
            | null ts = normalize (Seq (xp:xt)) : go ys
            | otherwise = normalize (Seq [xp, Alt (map Seq (xt:map snd ts)) ]) : go xs
            where
                (ts,xs) = partitioned ((xp==) . fst) ys
factorLeft Seq{elems} = normalize . Seq . map factorLeft $ elems
factorLeft Qnt{quantor, elem} = normalize . Qnt quantor . factorLeft $ elem
factorLeft other = other
   

convert ∷ EMap → YProd → EMap
convert map (yprod@YProd name rules) = Map.insert name eprod map
    where
        eprod = optimize map (convProd yprod) 

isAtomic Term{name} = true
isAtomic NonT{name} = true
isAtomic _          = false

--- Check if a production is trivial
--- The following are trivial
--- > 'term1' | 'term2' | 'term3' | 'term4' | 'term5'       -- up to 5 alternative terminals
--- > foo bar baz                                           -- up to 3 terminals nonterminals
--- Quantifications allowed only in single sequence mode on simple items. No sub-choices allowed.
trivial def
    | isRecursive def = false
    | otherwise = triv def.ebnf
    where
        triv Alt{elems} = length elems < 5 && all isAtomic elems
        triv Qnt{elem}  = isAtomic elem
        triv Seq{elems} = all noAlt elems && all triv elems
        triv _          = true
        noAlt Alt{} = false
        noAlt _     = true

work ∷ YGram → Map.HashMap String EDef → [String]
work ymap emap =(ydocs ++ edocs)
    where
        order = topo ymap       -- dependency order, items with least dependencies first
        oprod = [ [ YProd n rs | n ← group, rs ← Map.lookup n ymap ] | group ← order ]
        emap' = fold convertgroup emap oprod -- full EBNF
        convertgroup emap yprods = insProds emap oprods
            where
                insProds = fold (\m eprod → Map.insert eprod.name eprod m)
                eprods = map convProd yprods
                mapp   = insProds emap eprods
                oprods = map (optimize mapp) eprods 
        ydocs = [ show eprod | n ← reverse (concat order),     -- print only non simple ones 
                                    eprod ← Map.lookup n emap',
                                    true || not (trivial eprod) ]
        edocs = [ show eprod | eprod ← Map.values emap, true || not (trivial eprod) ] 
        
{--
    Run with
    > java ... examples.Yacc2EBNF foo.y bar.ebnf

    The first argument must name a YACC source.

    The optional second argument names a file with additional syntax given in EBNF.
    This can be used for specifying lexical syntax of your tokens, which makes sense
    if your grammar has terminal symbols produced by a tokenizer/lexer.

-}
main args = case args of
    [yaccsrc, ebnfsrc]
        | '\.y$' ← yaccsrc, '\.ebnf' ← ebnfsrc = do
            answer ← parseYacc yaccsrc 
            case answer of
                Right rules  → do
                    stderr.printf "%s: parsed %d yacc rules\n" yaccsrc (Map.size rules)
                    answer ← parseEBNF ebnfsrc
                    case answer of
                        Right eprods → do
                            stderr.printf "%s: parsed %d EBNF rules\n" ebnfsrc (length eprods)
                            let emap = fold (\m\def -> Map.insert def.name def m) empty eprods
                            mapM_ println (work rules emap)
                            stdout.println
                        Left error → do
                            stderr.println (ebnfsrc ++ ": " ++ error)
                Left error   → stderr.println (yaccsrc ++ ": " ++ error)
    _ -> do
        stderr.println "Usage: java ... examples.Yacc2EBNF foo.y bar.ebnf"

