{--
    Reads a YACC grammar and outputs it in a subset of
    'https://www.w3.org/TR/REC-xml/#sec-notation the EBNF variant used by W3C'.
    The resulting file can be processed by the 
    'http://www.bottlecaps.de/rr/ui Railroad Diagram Generator'
    to produce nice syntax diagrams.

-}
module de.contexo.railroad.Main where

import Data.MicroParsec as P()
import Data.HashMap as Map()
import Data.Iterators(StringIterator SI)
import Data.List
import Data.Graph

import de.contexo.data.EBNF as E


-- ---------------------------------------------------------------------------
--      YACC data types
-- ---------------------------------------------------------------------------

--- terminals and non-terminals are the foundations of YACC grammars
data Element = Terminal String | NonTerminal String

-- deriving Eq Element

--- a YACC rule is simply a possibly empty sequence of terminals and non-terminals 
newtype YRule = YRule [Element]

--- A YACC production is a list of alternative rules that defines a non-terminal.
--- Invariant: at most one rule is empty
data YProd = YProd String [YRule]

--- A YACC grammar is a sequence of productions
--- Each production defines a unique non terminal.
type YGram = Map.HashMap String [YRule]

--- Parse a block enclosed in braces
pBlock = do 
            P.between (P.symbol (P.expect '{')) 
                      (P.symbol (P.expect '}'))
                      (P.skip (pBlock <|> const () <$> P.satisfy (\c → c != '{' && c != '}')))
            P.spaces

--- Parse an element
pElement = NonTerminal <$> pName <|> Terminal <$> pChar

--- Parse a rule
pRule = YRule <$> P.many pElement <* P.optional pBlock 



--- Parse a production
pProd = do
    P.skip (P.space <|> pComment)
    p ← pName
    P.symbol (P.expect ':')
    alts ← P.sepBy1 pRule pBar
    P.symbol (P.expect ';')
    pure (YProd p alts)

--- Parse a YACC grammar and enforce invariants
grammar = do
        prods ← P.some pProd
        P.eos
        collect empty prods
    where
        collect map [] = pure map
        collect map (YProd p alts:ps) = do
                let emptys = length [ () | YRule [] <- alts ]
                case Map.lookup p map of
                    Just _  → P.failure ("found multiple rules for non-terminal `" ++ p ++ "´")
                    Nothing → if emptys > 1 
                        then P.failure ("production `" ++ p ++ "´ has " ++ show emptys ++ " empty rules.")
                        else collect (Map.insert p alts map) ps 




parseYacc :: String -> IO (Either String YGram)
parseYacc src = do
        content ← readFile src 
        let lines = '\r?\n'.splitted content
            yaccsep = '^%%\s*$'
            ylines = takeWhile (!~ yaccsep) . drop 1 . dropWhile (!~ yaccsep) $ lines
            yytext = SI.from (joined "\n" ylines)
        stderr.printf "We have %d lines, %d of which are interesting.\n" (length lines) (length ylines)
        -- mapM_ stderr.println (take 5 ylines)
        case P.Parser.run grammar yytext of
            (result, rest) -> do
                when (length rest > 0) do stderr.println (SI.to (take 64 rest))
                pure result
    `catch` \(e::IOException) -> pure . Left $ e.show 

parseEBNF :: String -> IO (Either String [EDef])
parseEBNF src = do
        content ← readFile src 
        pure (parseGrammar content)
    `catch` \(e::IOException) -> pure . Left $ e.show


-- ---------------------------------------------------------------------------
--      Functions to convert and manipulate grammars
-- ---------------------------------------------------------------------------


--- Make a dependency list for the yacc grammar
deps :: YGram -> [(String, [String])]
deps = fold (\ds\(name, rules) → (name, depsOf rules):ds) [] . Map.each
    where
        depsOf  = fold (++) [] . map ruleDep
        ruleDep (YRule es) = [ s | NonTerminal s ← es ]

--- Sort the dependencies topologically
topo ∷ YGram → [[String]]
topo = Graph.stronglyConnectedComponents . deps

--- Convert a YYProd to EBNF
convProd ∷ YProd → EDef
convProd (YProd name rules) = Def name (normalize choice)
    where
        choice = Alt (map convRule rules)

convRule ∷ YRule → EBNF
convRule (YRule elems) = Seq (map convItem elems)

convItem ∷ Element → EBNF
convItem (Terminal "'\\\\'") = Term "'\\'"
convItem (Terminal s)        = Term s
convItem (NonTerminal s)     = NonT s

--- Perform all optimizations on a production
optimize ∷ EDef → EDef
optimize eprod = eprod.{ebnf ← repeatUntil (==) factorRight 
                             . repeatUntil (==) factorLeft}


repeatUntil ∷ (α→α→Bool) → (α→α) → α→α
repeatUntil p f = rep . iterate f
    where
        rep (x:y:xs) | p x y = x
                     | otherwise = rep (y:xs)
        rep _ = undefined
 
--- Inline 'trivial' EBNFs
inline ∷ EMap → EBNF → EBNF
inline emap x = repeatUntil (==) inl x
    where
        inl Alt{elems}  = (normalize . Alt) (map inl elems)
        inl Seq{elems}  = (normalize . Seq) (map inl elems)
        inl Qnt{quantor, elem}   = (normalize . Qnt quantor) (inl elem)
        inl NonT{name}  = case Map.lookup name emap of
                            Just prod | trivial prod = prod.ebnf
                            other = NonT name
        inl term        = term

--- Factor left
--- > (a b | a c | d) ==> (a (b | c) | d)
factorLeft e = case e of
        Alt{}               = case repeatUntil (==) leftAlt e of
                    Alt{elems}  = normalize . Alt . map factorLeft $ elems
                    other       = factorLeft other
        Seq{elems}          = normalize . Seq . map factorLeft $ elems
        Qnt{quantor, elem}  = normalize . Qnt quantor . factorLeft $ elem
        other               = other
    where
        leftAlt Alt{elems}   = normalize . Alt . left . map prefix $ elems
        leftAlt other        = other
        left [] = []
        left ((xp,xt):ys) 
            | null ts = normalize (Seq (xp:xt)) : left ys
            | otherwise = normalize (Seq [xp, Alt (map Seq (xt:map snd ts)) ]) : left xs
            where
                (ts,xs) = partition ((xp==) . fst) ys

--- Factor right
--- > (a z | b z | c) ==> ((a | b) z | c)
factorRight e = case e of
        Alt{}               = case repeatUntil (==) rightAlt e of
                    Alt{elems}  = normalize . Alt . map factorRight $ elems     -- go deeper
                    other       = other
        Seq{elems}          = normalize . Seq . map factorRight $ elems
        Qnt{quantor, elem}  = normalize . Qnt quantor . factorRight $ elem
        other               = other
    where
        rightAlt Alt{elems} = normalize . Alt . right . map suffix $ elems
        rightAlt other      = other
        right [] = []
        right ((xi, xl):ys)
            | null same = normalize (Seq (xi++[xl])) : right ys
            | otherwise = normalize (Seq [Alt (map Seq (xi:map fst same)), xl ]) : right xs
            where
                (same,xs) = partition ((xl==) . snd) ys

{--
    > self ::=  foo                 self ::= (baz | buz)* (foo | bar)
    >           | bar
    >           | baz self
    >           | buz self
-}
unRecurse (Def self e) = case e of 
        Alt{elems} = (Def self . normalize . Alt . unright) elems
        Seq{}      = (Def self . normalize . Seq . unright) [e]
        _          = Def self e 
    where 
        unright xs  | null recs = xs
                    | otherwise = [Seq [
                                    Qnt Many (Alt (map (Seq . fst) recs)),
                                    Alt (map (\(es,e) → Seq (es++[e])) nonrecs)
                                    ]]
            where (recs, nonrecs) = partition ((NonT self ==) . snd) (map suffix xs)


isAtomic Term{name} = true
isAtomic NonT{name} = true
isAtomic _          = false

--- Check if a production is trivial
--- The following are trivial
--- > 'term1' | 'term2' | 'term3' | 'term4' | 'term5'       -- up to 5 alternative terminals
--- > foo bar baz                                           -- up to 3 terminals nonterminals
--- Quantifications allowed only in single sequence mode on simple items. No sub-choices allowed.
trivial def
    | isRecursive def = false
    | otherwise = triv def.ebnf
    where
        triv Alt{elems} = length elems < 5 && all isAtomic elems
        triv Qnt{elem}  = isAtomic elem
        triv Seq{elems} = all noAlt elems && all triv elems
        triv _          = true
        noAlt Alt{} = false
        noAlt _     = true

work ∷ YGram → Map.HashMap String EDef → [String]
work ymap emap =(ydocs ++ edocs)
    where
        order = topo ymap       -- dependency order, items with least dependencies first
        oprod = [ [ YProd n rs | n ← group, rs ← Map.lookup n ymap ] | group ← order ]
        emap' = fold convertgroup emap oprod -- full EBNF
        convertgroup emap yprods =  withDump [
                                        dump "eprods" eprods,
                                        --dump "names"  names,
                                        --dump "mape"   mape,
                                        --dump "mapo"   mapo,
                                        --dump "mapi"   mapi,
                                        --dump "mapO"   mapO,
                                    ] 
                                    mapO
            where
                eprods = map (unRecurse . convProd)  yprods      -- optimized prods
                !names = map EDef.name eprods
                mape   = fold (\m\p → Map.insert p.name p m) emap eprods     -- prods
                mapo   = fold (\m n → Map.adjust optimize n m) mape names    -- optimized prods
                mapi   = fold (\m\n → Map.adjust _.{ebnf ← inline m} n m) mapo names
                mapO  = fold (\m\n → Map.adjust optimize n m) mapi names
                -- mapO   = fold (\m\n → Map.adjust optimize n m) mapO1 names
        ydocs = [ show eprod | n ← reverse (concat order),     -- print only non simple ones 
                                    eprod ← Map.lookup n emap' ]
        edocs = [ show eprod | eprod ← Map.values emap ] 

dump str map = traceLn (str ++ ": " ++ show map)
withDump items y = if or items then y else y

{--
    Run with
    > java ... examples.Yacc2EBNF foo.y bar.ebnf

    The first argument must name a YACC source.

    The optional second argument names a file with additional syntax given in EBNF.
    This can be used for specifying lexical syntax of your tokens, which makes sense
    if your grammar has terminal symbols produced by a tokenizer/lexer.

-}
main args = case args of
    [yaccsrc, ebnfsrc]
        | '\.y$' ← yaccsrc, '\.ebnf' ← ebnfsrc = do
            answer ← parseYacc yaccsrc 
            case answer of
                Right rules  → do
                    stderr.printf "%s: parsed %d yacc rules\n" yaccsrc (Map.size rules)
                    answer ← parseEBNF ebnfsrc
                    case answer of
                        Right eprods → do
                            stderr.printf "%s: parsed %d EBNF rules\n" ebnfsrc (length eprods)
                            let emap = fold (\m\def -> Map.insert def.name def m) empty eprods
                            mapM_ println (work rules emap)
                            stdout.println
                        Left error → do
                            stderr.println (ebnfsrc ++ ": " ++ error)
                Left error   → stderr.println (yaccsrc ++ ": " ++ error)
    _ -> do
        stderr.println "Usage: java ... examples.Yacc2EBNF foo.y bar.ebnf"

